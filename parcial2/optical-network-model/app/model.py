import numpy as np

class OpticalNetworkModel:
    def __init__(self):
        # Define network architecture
        self.num_layers = 5
        self.neurons_per_layer = [13, 32, 16, 16, 1]
        
        # Load weights and biases (from your ESP32 code)
        self.weights_layer1 = np.array([[0.0148986, -0.2941645, -0.8319696, 0.1709851, 0.4593326, 0.1075114, 0.0196137, 0.1037742, 0.5599166, -0.7703429, 0.4772471, -0.4200749, -0.0388273, 0.6972159, 0.2130593, 0.3195935, -0.1238120, 0.9556544, 0.1972060, 0.2401338, 1.1304452, 0.0849124, 0.3972036, -0.1005963, 0.2197006, 0.2619914, 0.0032553, 0.7276697, 0.1296358, 0.3365347, 0.7252428, 0.1076923], [0.1403659, 0.2079335, 0.4095384, -0.6917703, -0.3211283, 0.6573109, 0.5889140, -0.7513124, 0.4941586, 0.1228386, 1.5624946, -0.3530857, -0.7926112, 0.7025129, 0.1946866, 0.2046451, 0.0938462, 0.5467321, -0.1496149, -0.1257507, 0.5498160, -0.4299145, 0.0477510, 0.2548089, -0.4079427, -0.2178719, -0.0282463, 0.5635870, 0.3710152, -0.1573096, 0.4671628, -0.5193460], [0.1552236, -0.3042267, 0.1846066, -0.6420550, 0.0162180, 1.3027192, 0.6092328, -0.1057940, 0.3485214, -0.0892609, 0.4067240, 0.3518060, 0.2890366, 0.6548502, 0.2289495, -0.6268603, 0.4671204, -0.1451732, -0.5416299, -0.4626161, 1.0993574, -0.0462510, -0.0899794, -0.2749962, 0.3531786, -0.1738793, 0.1820067, 0.4019195, 0.1060284, 0.5664091, 0.1180652, 0.0167670], [-0.7208554, -0.4223508, 0.6732194, -0.3763991, -0.0114096, 0.0249803, -0.7251152, 0.2427523, 0.3913592, 0.2707280, -1.0104966, 0.1569967, 0.2914935, 0.2677662, 0.5058206, -0.4464337, -0.0760454, 0.3876368, -0.3518645, 0.0912416, -1.0036533, -0.4982756, -0.2558061, 0.0572117, -0.8693479, -0.4051788, 0.3398539, -0.3200517, 0.0510862, 0.7765495, 0.4852637, 0.3627557], [0.5825368, 0.0774379, 0.3871076, -0.3561828, -0.0010761, 0.2384959, 0.7606653, 0.3528426, -0.2337747, -0.9123739, 0.3652373, -0.7250747, 0.2992716, 0.0913325, -0.7199046, 0.4750066, 0.3992327, 0.1402977, 0.2280820, -0.3633701, 1.2116706, 0.1276377, 0.0226858, -0.0618996, -0.3210693, 0.0765073, -0.2725873, 0.7569858, -0.0302020, -0.0174714, 0.1652749, 0.8097212], [-0.6334819, -0.2623695, 0.0758430, 0.1474166, -0.1342417, 0.1140053, -0.4781209, -0.0264779, -0.0745982, -0.0845788, -0.4443024, 0.0061707, -0.2104890, 0.4509491, -0.1646795, 0.3252562, 0.2232583, 0.1237304, -0.4586542, 0.2663838, -0.7041062, 0.0585790, -0.6488546, 0.3978231, -0.2560042, -0.1325962, -0.5023125, -0.5074930, -0.3556378, -0.4024377, -0.0903070, 0.3475024], [0.2290349, -0.5626307, 0.0237028, 0.5319924, -0.2839943, -0.3544545, -0.4627894, 0.4865046, -0.6540096, 0.0796252, -0.4413163, -0.3474052, 0.2739325, -0.0616552, 0.3234591, -0.3910347, 0.2413025, 0.1944749, -0.4253637, 0.1532457, -0.8485072, 0.2415711, -0.3655138, -0.4173358, -0.5558650, 0.2939814, -0.3728800, -0.5203192, -0.2629294, -0.7245726, -0.7659588, 0.4900292], [-0.0106776, -0.0210019, -0.0386992, 0.1188251, -0.2646218, -0.3991081, -1.0581795, 0.5995509, 0.2305437, -0.1821856, -2.5120382, -0.7015826, 0.6177802, -0.3309942, -0.7150155, 0.7622033, -0.4844372, -0.1705696, 0.4931104, 0.4049708, 0.2831751, -0.4997676, 0.7551306, -0.4073449, -0.0535710, 0.4915428, -0.3436897, -0.6267512, -0.3239118, -0.3421690, -1.4013509, -0.3270914], [-0.2537781, 0.2495648, -0.4303505, 0.1704018, -0.3924848, 1.1843717, 1.1931154, 0.5773568, -0.5371011, -0.6260358, 0.9598604, 0.3051231, -0.0057929, 0.5026779, -0.0477493, -0.7329738, 0.5418867, 0.5050340, -0.0475881, 0.4876342, 0.6464975, 0.4105242, 0.1147882, -0.6943675, 0.6737077, -0.3739339, 0.3689983, 0.2897388, 0.0277476, -0.5319873, 0.5411572, 0.0919722], [-0.2487990, 0.1122084, 0.5032218, -0.2419156, 0.2904370, -0.2855034, 0.4769156, 0.2973637, 0.1721619, -0.1909598, 0.3703668, -0.6522054, -0.2505351, 0.2464416, -0.1503856, 0.0126645, 0.1811921, -0.0607443, 0.2077211, -0.0328309, 0.4926206, 0.7095881, 0.8112292, 0.0421658, -0.4502079, -0.2517873, -0.4608909, 0.4827073, 0.2794042, -0.0353290, 0.0966628, -0.0132069], [0.3438934, 0.4593134, 0.6163602, 0.2682832, -0.1214797, -0.0369192, 1.2270153, 0.5330743, -0.0854634, -0.5450307, 0.3714488, -0.4514209, 0.0924816, 0.3011664, -0.4672973, 0.7751145, 0.3213822, 0.2884050, 0.3737821, 0.4931132, 0.3447322, -0.3743249, -0.0633748, 0.3296991, -0.3000114, -0.2131946, 0.8478973, 0.1102239, -0.3786842, -0.3892200, -0.0963989, -0.4131201], [0.1093239, 0.0323038, -0.4906842, 0.4816111, -0.2386212, -0.3470132, 0.1661886, -0.1549590, -0.5284192, -0.2934541, -1.1078159, -0.0530446, -0.6867511, -0.4144571, 0.0424180, 0.5577320, -0.3860258, -0.8809008, 0.0397217, -0.2578960, -0.9184317, -0.1840186, -0.0358126, -0.4623706, 0.1055184, -0.0812241, 0.1575291, 0.0241920, 0.2601506, 0.2165137, -1.2627118, 0.2318938], [0.1443587, 0.3708210, 0.3859284, 0.5044415, 0.5941939, 1.5659539, 1.4429229, -0.0602715, 0.5127615, -0.5930908, 2.7453213, 0.3288026, -0.2435333, 0.2178227, 0.3144897, -0.2042778, 0.2985745, 1.2988685, -0.4163710, 0.2023547, 0.7607633, -0.0000315, 0.5005885, -0.5775188, 1.2022749, -0.1486965, 0.5360215, -0.4101122, -0.0009223, -0.4114280, 1.2186331, -0.3665494]])  # Copy from original code
        self.bias_layer1 = np.array([0.1223859, 0.3225804, 0.4881302, 0.2737085, 0.6897830, 1.8722496, 1.5079073, -0.3043559, 0.3207249, 0.2138316, -1.4749883, 0.0358991, 0.4020977, 0.4994913, 0.0843357, -0.0741398, 0.0137605, 0.6009023, 0.0653243, 0.1499956, 1.7995919, -0.1494634, 0.3541529, 0.0644498, 1.4864830, 0.5186136, 0.9137248, 0.7293050, 0.4609802, 0.0184674, -0.1606272, -0.1290402])
        
        self.weights_layer2 = np.array([[-0.3073824, 0.4307991, -0.0655026, -0.0639824, -0.3244597, 0.0437471, 0.1911339, 0.4927918, 0.1094549, -0.2519894, -0.1027231, 0.4802800, -0.2477523, -0.0279924, -0.1598215, 0.0011576], [0.0559039, 0.2871928, -0.0503111, 0.1579066, -0.5327808, -0.2473390, 0.5489836, -0.2680358, -0.0354756, -0.0070738, -0.3321365, 0.3809133, 0.4693638, -0.0129216, 0.0159930, -0.3061743], [-0.3239312, 0.2035469, 0.6585096, 0.0898846, -0.0297810, -0.1670342, 0.1230833, -0.0064797, 0.1430981, -0.2743788, 0.2432237, 0.3974751, 0.2411356, -0.1769545, 0.1505540, 0.1149778], [-0.0757997, 0.1977573, -0.1069352, -0.1990566, 0.0384524, -0.2393484, -0.1945201, 0.2808445, -0.1342293, -0.1439360, -0.2407965, -0.0899767, -0.4163347, 0.0694647, -0.2478839, -0.3576498], [-0.1688779, -0.3344893, 0.2241615, -0.0052897, 0.1917104, -0.0230516, 0.3873248, -0.2262039, -0.4154003, 0.3856388, 0.0028414, 0.1913149, 0.4468194, -0.2538252, 0.3738806, 0.1405991], [0.2409175, -0.0086420, 0.9731499, -0.0935748, 0.4317273, 0.0520740, 0.8862678, -0.0063722, 0.3234119, -0.2943878, 0.7761983, 0.2064594, 1.2500173, 0.2849231, 1.0730581, 0.2768245], [-0.0995407, -0.0017382, 1.7323587, 0.5107143, 0.1210594, -0.1458434, 0.8484381, -0.2866179, -0.0689305, 0.3925094, 0.6309803, 0.6133432, 0.9715245, 0.0276078, 0.6049792, 0.1805592], [-0.2177132, -0.1534805, -0.5641553, 0.1518892, 0.0722520, -0.4344533, -0.3219842, -0.2295269, 0.0252083, -0.0276679, -0.3776660, -0.0426537, -0.2140305, -0.1399858, -0.3260562, -0.4082626], [-0.0893324, -0.3217176, 0.3285067, 0.1794713, 0.2394496, 0.1483652, 0.5104503, -0.4146220, 0.1940612, 0.1647568, 0.3638763, 0.1961213, 0.0699059, 0.0153511, 0.0607173, -0.2527742], [-0.4902351, -0.0847865, 0.6433910, 0.1251387, 0.0326361, 0.3226884, -0.1125504, 0.1438779, 0.2583565, -0.2908690, -0.0807348, -0.1451417, 0.4342124, 0.0354502, 0.0611211, -0.0602639], [0.0580418, -0.4841283, 3.1623931, 0.3023255, 0.2172375, 0.4938394, 1.6316925, 0.3068112, -0.2365721, -0.1703508, 1.3424816, 0.1340545, 1.9294895, -0.3989429, 1.6563687, 0.7551940], [0.4008613, 0.1940425, -0.1173001, 0.1892196, 0.1871068, 0.4607780, -0.0911921, 0.1320411, 0.1115763, 0.4871061, -0.2629627, 0.3601543, 0.3298776, 0.0152826, -0.0347431, -0.5092598], [0.1965992, -0.1400846, -0.6567253, 0.0024280, 0.1740622, -0.0907874, -0.5137369, 0.0108388, 0.0238217, -0.0108618, -0.5488353, -0.0798861, -0.6587622, 0.2559667, -0.4606216, -0.3848125], [0.1897280, -0.1637911, 0.2132520, 0.1980325, -0.1627274, 0.0319562, 0.6023596, 0.2368853, -0.0367368, -0.3076136, -0.1185818, 0.4840572, 0.3238532, -0.4604102, 0.4616347, 0.4285819], [0.4002930, 0.1527661, 0.0529637, 0.0492347, -0.3275890, 0.0942995, 0.0578147, -0.1381992, -0.1531324, -0.1770056, 0.0532225, 0.0605453, 0.2456220, -0.1637621, -0.0563184, 0.0905435], [-0.0827718, 0.0275485, -0.9522800, -0.5077344, -0.3195842, -0.1337627, -0.3215992, 0.6205274, 0.2375018, -0.1624269, -0.0886221, -0.1110873, -0.7286182, -0.2849669, -0.8779619, 0.2316401], [-0.2043734, -0.1712623, 0.4057420, 0.3092473, -0.5278931, -0.2581693, 0.6232107, 0.3244261, -0.4844264, 0.3947286, 0.2349624, 0.4576700, -0.1041493, 0.1397524, 0.3352104, -0.0518633], [-0.0999593, -0.3232881, 0.5964326, -0.1830000, -0.0681546, 0.3798874, 0.6491442, -0.1261191, 0.2355583, 0.0141127, 0.5348656, 0.0552423, 0.7411207, 0.0572151, 0.5402085, 0.0269307], [-0.3049028, 0.2053767, -0.3954121, -0.0654005, 0.1661851, -0.4456979, -0.3004353, 0.1996370, 0.0497417, -0.0171604, -0.1226896, 0.0768099, 0.0746026, -0.0540516, -0.2689252, 0.3232624], [-0.0434982, -0.1068818, -0.2406326, -0.2590489, -0.2336386, -0.1812169, -0.1668161, -0.0335210, -0.0350981, -0.1449701, 0.1081820, -0.0344626, 0.4598832, 0.0189145, -0.0815788, -0.0496133], [-0.2131595, -0.2076248, 0.9550051, -0.0936143, -0.0426523, 0.4115322, 0.5970417, -0.1982852, -0.0610355, -0.0755587, 0.4395894, 0.0738304, 0.2312466, 0.0479890, 0.5428843, 0.1588027], [0.1575508, -0.1958476, 0.3074107, -0.3962168, -0.2289966, 0.3423838, -0.0575807, -0.4400852, -0.1573400, 0.1157770, -0.0854829, 0.5015305, -0.1968139, 0.2104076, -0.3557313, 0.0968538], [0.1837730, 0.2885007, 0.2445656, -0.1581312, -0.5187787, 0.0858846, 0.1022845, 0.2186456, 0.2963402, 0.1329484, 0.3430561, 0.3540444, -0.2863999, -0.5148258, 0.0703101, -0.2252156], [0.0753352, -0.5374089, -0.4528809, 0.0308210, 0.1570900, 0.0703538, 0.1278037, -0.1435822, 0.2420481, 0.1269132, -0.4646584, -0.1549568, 0.1987128, 0.1553978, -0.0896384, -0.4343683], [0.0953748, 0.0857099, 0.8530303, 0.4169463, 0.1611769, 0.1230267, 0.3798204, 0.0893254, 0.2108264, 0.4884504, 0.3412455, 0.0357532, 0.5194098, 0.2412668, 0.4689426, 0.0518705], [-0.5283805, -0.2371037, -0.6243259, 0.1942920, -0.4584304, 0.3697206, -0.5633302, 0.4696127, -0.1841171, 0.0738638, 0.0203520, 0.0050683, -0.5938868, -0.3039491, -0.5535588, -0.1850230], [0.2683365, -0.0109453, 0.8668253, 0.0511559, 0.2670146, 0.4896391, 0.0244343, 0.5093782, 0.2768682, -0.1589739, 0.4441587, -0.0754947, 0.7125588, -0.2028463, -0.2723897, 0.1154294], [-0.2037670, 0.3332347, 0.5263696, -0.1182896, -0.4616139, 0.3399346, 0.1685703, 0.0798731, -0.5362837, -0.4311821, -0.2726115, -0.0562379, 0.4822229, -0.0346146, 0.4390272, -0.0336469], [-0.0797525, 0.2876518, 0.2794328, -0.2822030, 0.0691809, 0.3428118, 0.0359393, 0.1739426, -0.3083176, 0.2129167, 0.0100486, 0.2933928, 0.2947720, 0.1021304, 0.0659842, -0.2204637], [0.3216170, 0.2175268, -0.1849041, 0.0012829, -0.1406371, -0.4077963, 0.2480477, 0.0688926, -0.0215275, 0.0830163, -0.0763807, -0.0022003, -0.2111309, 0.4382280, -0.0507380, -0.2068949], [-0.1930618, -0.3808706, 1.5503199, 0.3230242, -0.4189647, -0.3154585, 1.1544660, -0.2688476, -0.2845091, -0.3865134, 0.7206017, 0.5361655, 1.6802503, -0.4233514, 0.9195458, 0.7806122], [0.2010386, -0.0726048, -0.7846900, -0.5420951, 0.3406204, 0.2245667, -0.3860240, -0.3879622, -0.1407628, 0.1360181, -0.1404743, 0.0200191, -0.4030673, -0.1909173, -0.6979522, 0.3423943]])
        self.bias_layer2 = np.array([[-0.4434569, 0.6733105, 1.8517185, 0.1240846, -0.1124820, 0.2910686, 0.9552837, 0.7156739, -0.0418586, -0.3937442, 0.4634693, 0.0378190, 1.0076370, 0.0021591, 1.4239913, -0.1165121]])

        self.weights_layer3 = np.array([[-0.6130090, 0.4047717, 0.4137267, -0.2226394, -0.5828744, -0.3281699, 0.0484422, -0.0195647, -0.5428156, -0.6850060, -0.1077955, -0.2929965, -0.1221391, -0.2598013, 0.1203669, -0.7069916], [-0.5763329, 0.1851378, -0.0278762, -0.6949731, -0.4861808, 0.3179223, 0.6339139, -0.2365612, 0.3787739, 0.6390014, -0.1450634, 0.2868856, 0.5503410, -0.3651466, -0.0816493, -0.2296281], [-0.0720227, 2.1172357, -0.0986208, 0.1637170, 1.8149605, 0.0057164, -0.6769993, 0.2044146, -0.5463243, 1.0352757, 0.2679399, 0.1349757, 3.1971693, 0.2293409, 0.1677668, 0.3369769], [-0.7778735, 0.1620735, -0.2851957, 0.1564571, -0.1398036, 0.3140400, 0.7016040, -0.5976095, -0.1858123, -0.2580386, -0.2096140, -0.7872105, 0.9056782, -0.1977871, -0.2115656, 0.0094718], [-0.4224404, 0.3080108, 0.3503006, 0.3220725, -0.1788381, 0.1126985, -0.2406335, -0.3265418, -0.7812169, -0.1239312, 0.0681200, -0.0168467, -0.3789996, 0.6208529, 0.1893218, 0.2448936], [-0.5091397, -0.0685778, 0.1690736, 0.2455083, 0.4827481, -0.7979435, 0.1886433, -0.5054774, -0.0406078, 0.0365678, 0.2881113, 0.2132107, 0.2147433, -0.1357590, -0.1013366, -0.0318009], [0.7326464, 1.4357187, -0.4275009, -0.0889497, 0.8283130, 0.6233324, 0.2693041, 0.2298580, -0.0907329, 0.9241998, -0.0360191, -0.2518958, 1.6912400, 0.7004347, -0.0281524, -0.4401813], [0.1923819, -0.8300059, -0.0804819, 0.4117521, -0.0349778, 0.1215592, 0.2494885, -0.1713862, 0.1582480, 0.2292323, 0.0016600, 0.3278343, -0.8872753, 0.2411189, 0.6473424, 0.1539183], [-0.0854927, -0.1171142, 0.1047582, -0.0012757, -0.1196015, 0.4774940, -0.1020863, 0.4122558, 0.0027387, 0.0656558, -0.5141439, -0.2749066, 0.0694210, -0.1653986, -0.2087973, 0.1879471], [0.4290042, -0.2823961, 0.2404467, 0.1834102, -0.0316182, -0.1655758, -0.4079140, -0.0393881, -0.5461287, -0.5124876, 0.0696271, -0.1417669, -0.4129112, 0.0929936, -0.2166018, -0.4890583], [0.3546912, 1.0052680, 0.3597229, -0.2805032, 0.0518258, 0.3655552, 0.4102083, -0.3411536, 0.1432519, 0.4467805, -0.2817040, -0.1599098, 1.6438823, -0.3591397, -0.0169123, -0.1798314], [0.2780488, -0.4625812, 0.1513310, -0.3114238, 0.5593900, 0.2290643, 0.1208132, -0.0354862, 0.4295386, -0.5050855, 0.4916290, -0.3710929, 0.7807028, -0.4164064, -0.1130527, 0.2761094], [0.2587760, 1.5978438, -0.6648198, -0.4891226, 0.9820936, -0.4980595, -0.4224223, 0.1618997, -0.5911114, 1.5019927, -0.4534083, 0.2323861, 2.3829651, -0.0716174, -0.3511905, -0.1046012], [0.2170082, -0.5344766, -0.1069756, 0.1051823, 0.7793254, 0.1586153, -0.3298894, 0.0682716, -0.0787432, -0.2285494, 0.4191078, -0.1120708, 0.3225145, 0.0311516, 0.5045890, 0.4296675], [0.0727849, 1.0056920, 0.3925869, 0.4005442, 1.1500220, -0.0698167, -0.3957955, -0.1633193, 0.6900221, 0.5658013, -0.3551324, 0.1344899, 2.0827363, -0.6009325, 0.1906346, 0.7259149], [-0.3098648, 0.7159750, -0.2794068, 0.3296253, 0.4328679, -0.7109857, 0.2008197, -0.3046075, -0.5884526, 0.7114853, 0.6030250, 0.7508435, 0.5371445, 0.2034312, -0.2222421, 0.0379739]])
        self.bias_layer3 = np.array([[-0.0915481, 1.2976664, -0.0388876, -0.1428965, 0.9802423, -0.3161886, 0.0017779, 0.2106622, -0.0102574, 0.9085049, -0.1463847, -0.0995574, 1.8666062, 0.5372567, 0.4344525, 0.0784174]])
        
        self.weights_layer4 = np.array([[0.1285052], [3.2323773], [-0.1838836], [-0.3397921], [2.2472658], [-0.2698018], [0.0398273], [-0.1611652], [-0.2688217], [2.1628985], [-0.2056182], [0.0802794], [4.9663701], [-0.6255414], [0.5815539], [0.4669947]])
        self.bias_layer4 = np.array([[2.7594264]])

        # Standardization parameters
        self.means = np.array([40.0, 7.0, 0.55, 0.649013, 377.459157, 333.247102, 26.347886])
        self.std_devs = np.array([24.018772, 2.237817, 0.287453, 0.194737, 381.974899, 233.72186, 223.782214])
        
    def relu(self, x):
        return np.maximum(0, x)
    
    def preprocess_input(self, numeric_inputs, spatial_dist, temporal_dist):
        # Standardize numeric inputs
        standardized = (np.array(numeric_inputs) - self.means) / self.std_devs
        
        # One-hot encode categorical inputs
        input_vector = np.zeros(13)
        input_vector[:7] = standardized
        
        # Set spatial distribution
        if spatial_dist == "BR":
            input_vector[7] = 1.0
        elif spatial_dist == "HR":
            input_vector[8] = 1.0
        # ... other categories
        
        # Set temporal distribution
        if temporal_dist == "Asynchronous":
            input_vector[11] = 1.0
        elif temporal_dist == "Client-Server":
            input_vector[12] = 1.0
            
        return input_vector
    
    def feedforward(self, input_vector):
        # Layer 1
        layer1_output = self.relu(np.dot(input_vector, self.weights_layer1) + self.bias_layer1)
        
        # Layer 2
        layer2_output = self.relu(np.dot(layer1_output, self.weights_layer2) + self.bias_layer2)
        
        # Layer 3
        layer3_output = self.relu(np.dot(layer2_output, self.weights_layer3) + self.bias_layer3)
        
        # Output layer (no activation)
        final_output = np.dot(layer3_output, self.weights_layer4) + self.bias_layer4
        
        return final_output[0]
    
    def predict(self, numeric_inputs, spatial_dist, temporal_dist):
        input_vector = self.preprocess_input(numeric_inputs, spatial_dist, temporal_dist)
        return self.feedforward(input_vector)